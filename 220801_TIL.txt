1. 앞으로 git 프로젝트로 만들고 싶은 것
첫주차 팀프로젝트 구현 git으로 완료하기

2. 1주차 주요 개념 키워드 적어보기
- 버전 관리 : 누가, 언제, 현재 프로젝트의 내용이 어떤지 정보를 남긴다는 것
- commit : 현재 프로젝트의 상태를 저장한다. Git 이 이전 commit(이전에 저장한 프로젝트의 상태)를 알고 있으므로 자동으로 어떤 부분이 바뀌었는지 알려준다. 누가, 언제, 어떤 부분을 바꾸었는지 확인해볼 수 있다.

1. 버전관리를 한다는 건 어떤 의미일까?
    - 프로젝트 상태가 변경되는 정보를 알고 있다는 것입니다. Git 은 누가, 언제, 해당 시점의 프로젝트 상태를 기록해두기 때문에 버전 관리가 가능합니다.
2. 작업내역 단위인 commit 에는 어떤 정보가 포함되어 있어야 잘 버전관리를 할 수 있을까?
    - 누가, 언제, 무엇을 했는지가 필요하겠죠? 어떤 작업을 했는지 알려주는 작업 내역인 commit 메시지, 누가(author), commit 한 시간이 필요해요.
    - 그리고 commit 을 편하게 관리하기 위한 commit 아이디!  commit 아이디는 사용자 아이디처럼 commit 에 부여된 유일한 값!
3. 지금까지 우리가 실습은 어떤 순서로 했었지?
    - 기존의 프로젝트를 git 프로젝트로 만든다. - git 초기화(git initialize)
    - commit 할 파일들을 add(staging) 하고  commit 메시지 작성해서 commit!

1. 원격 repo 와 로컬 repo 를 연결해서 내용을 반영하고 싶을 땐 어떤 방법을 써야할까? 
    - 로컬  repo 가 없고 원격 repo 에 있는 내용을 가져오고 싶을 때는 clone 한다.
    - 원격 repo 와 로컬 repo 둘 다 있고 두 개를 연결하고 싶을 때는 로컬 repo 가 원격 repo를 tracking 하도록 설정한다.
2. 원격 repo 와 로컬 repo 는 왜 따로 있을까? 
    - 협업할 때, 혹은 여러 컴퓨터를 사용한다면 하나의 원격 repo 에 여러 로컬 repo 를 연결시킬 수 있다. 하나의 프로젝트를 동시에 작업하는게 가능해진다.
        
https://s3-us-west-2.amazonaws.com/secure.notion-static.com/0af33dd9-21cb-4bcf-9aaa-4b887072caac/1week.003.jpeg](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/0af33dd9-21cb-4bcf-9aaa-4b887072caac/1week.003.jpeg
        

3. push 와 pull 의 개념을 원격 repo와 로컬 repo 를 포함해 그림으로 그려보세요. 

https://s3-us-west-2.amazonaws.com/secure.notion-static.com/59e20dfa-09e8-44d1-8512-5ff9be1ee562/1week.005.jpeg](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/59e20dfa-09e8-44d1-8512-5ff9be1ee562/1week.005.jpeg

- 총 정리 개념
    - **버전 관리:** 프로젝트 상태가 변경되는 정보를 알고 있다는 것입니다. Git 은 가장 널리 쓰이는 버전관리 도구 중에 하나로 commit 을 사용해서 버전이 달라지는 것을 관리합니다.
    - **git 초기화(git initialize) :** 컴퓨터에 있는 프로젝트를 Git 이 관리하는 프로젝트로 만들 수 있습니다. 앞으로 Git 으로 관리할꺼야! 하고 설정해주면 됩니다. 이 작업을 한다고 표현합니다.
    - **commit  :** 현재 프로젝트의 상태를 찰칵 📸  저장하는 것을 이라고 합니다.
        - 누가(author), 언제 commit 했는지의 정보와 프로젝트 변경 내용
        - 작업내역이 어떤 것인지 알아볼 수 있게 적는 메시지를 'commit 메시지'라고 합니다.
    - add (혹은 staging, 스테이징) : commit 에 반영할지 안할지는 파일 단위로 선택할 수 있습니다. commit 에 반영할 파일을 선택하는 것
    - commit history : commit 한 순서대로 리스트. 역사!
    - 지금까지 우리가 한 작업은 'git 초기화하기(initialize) - add(staging) - commit' 입니다.
    - git 초기화는 처음에 단 한번만 해 주면 됩니다. 작업 내역을 저장하기 위해서는 **add - commit** 만 하면 됩니다.
    - **repo :** 'Git으로 관리되는 프로젝트' 를 Git 에서는 **repo(리포**, repository 리포지토리의 약자) 라고 부릅니다. 내 컴퓨터에 저장되어있는 리포지토리를 **로컬 repo**(local repository) 라고 합니다. Github 처럼 다른 곳에서 접속할 수 있는 공간에 저장되어있는 것을 **원격 repo**(remote repository) 라고 합니다.
    - Tracking(추적) : 로컬 repo 와 원격 repo 를 연결한다! 
    - push : 로컬 repo 의 commit 들을 원격 repo 에 반영하기(push)! 밀어넣기. 원격 repo 에 없는 즉,새로운 commit 내역을 모두 원격 repo 에 한 번에 반영합니다.
    - pull : 원격 repo 의 commit 들을 로컬 repo 로 반영하기(pull)! 땡겨오기. 로컬 repo 에 없는 즉,새로운 commit 내역을 모두 로컬 repo 에 한 번에 반영합니다.
    - clone : 원격 repo 를 내 컴퓨터에 가져와서 초기 repo 세팅하는 것을 clone(복제하기)!